# ---------------------------------------------------------------------------------------------------------------------
# Create VPC
# Provider Docs: https://www.terraform.io/docs/providers/aws/r/vpc.html
# ---------------------------------------------------------------------------------------------------------------------
resource "aws_vpc" "this" {
  cidr_block           = var.cidr_block
  instance_tenancy     = var.instance_tenancy
  enable_dns_support   = var.enable_dns_support
  enable_dns_hostnames = var.enable_dns_hostnames
  tags = {
    Name = var.name
  }
}

# ---------------------------------------------------------------------------------------------------------------------
# Create subnets in VPC
# Provider Docs: https://www.terraform.io/docs/providers/aws/d/subnet.html
# ---------------------------------------------------------------------------------------------------------------------

resource "aws_subnet" "this" {
  count                   = length(var.subnets)
  availability_zone_id    = var.subnets[count.index].availability_zone
  cidr_block              = var.subnets[count.index].cidr_block
  map_public_ip_on_launch = var.subnets[count.index].map_public_ip_on_launch
  tags = {
    Name = var.subnets[count.index].name
  }
  vpc_id = aws_vpc.this.id
}

# ---------------------------------------------------------------------------------------------------------------------
# Create optional internet gateway
# Provider Docs: https://www.terraform.io/docs/providers/aws/d/internet_gateway.html
# ---------------------------------------------------------------------------------------------------------------------

resource "aws_internet_gateway" "this" {
  count  = var.internet_gateway == true ? 1 : 0
  vpc_id = aws_vpc.this.id
}

# ---------------------------------------------------------------------------------------------------------------------
# If internet gateway requested, create route table between VPC and internet gateway
# Provider Docs: https://www.terraform.io/docs/providers/aws/r/route_table.html
# ---------------------------------------------------------------------------------------------------------------------

resource "aws_route_table" "this" {
  count  = var.internet_gateway == true ? 1 : 0
  vpc_id = aws_vpc.this.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.this[0].id
  }
}

# ---------------------------------------------------------------------------------------------------------------------
# If internet gateway requested, add internet gateway route table to main VPC route table
# Provider Docs: https://www.terraform.io/docs/providers/aws/r/main_route_table_association.html
# ---------------------------------------------------------------------------------------------------------------------

resource "aws_main_route_table_association" "this" {
  count          = var.internet_gateway == true ? 1 : 0
  vpc_id         = aws_vpc.this.id
  route_table_id = aws_route_table.this[0].id
}

# ---------------------------------------------------------------------------------------------------------------------
# If flowlogs requested, create cloudwatch log group destination and role
# Provider Docs: https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/flow_log
# ---------------------------------------------------------------------------------------------------------------------

resource "aws_flow_log" "this" {
  count           = var.flowlogs == true ? 1 : 0
  iam_role_arn    = aws_iam_role.this[0].arn
  log_destination = aws_cloudwatch_log_group.this[0].arn
  traffic_type    = var.log_traffic_type
  vpc_id          = aws_vpc.this.id
}

# ---------------------------------------------------------------------------------------------------------------------
# Create trusted IAM Role for flowlogs to be generated by assuming role
# Provider Docs: https://www.terraform.io/docs/providers/aws/r/iam_role.html
# Data Docs: https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html
# ---------------------------------------------------------------------------------------------------------------------

resource "aws_iam_role" "this" {
  count              = var.flowlogs == true ? 1 : 0
  name               = var.role_name
  assume_role_policy = data.aws_iam_policy_document.assume.json
}

data "aws_iam_policy_document" "assume" {
  statement {
    actions = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["vpc-flow-logs.amazonaws.com"]
    }
  }
}

# ---------------------------------------------------------------------------------------------------------------------
# Create CloudWatch log group for flowlog log destination and attach to IAM role.
# flowlogs will try to create a log group called /aws/flowlogs/<VPC name> if it doesn't exist.
# Provider Docs: https://www.terraform.io/docs/providers/aws/r/cloudwatch_log_group.html
# ---------------------------------------------------------------------------------------------------------------------

resource "aws_cloudwatch_log_group" "this" {
  count             = var.flowlogs == true ? 1 : 0
  name              = "/aws/flowlogs/${var.name}"
  retention_in_days = var.log_retention_in_days
}

# ---------------------------------------------------------------------------------------------------------------------
# Create and attach IAM policy for flowlogs to write to and create CloudWatch log streams
# Provider Docs: https://www.terraform.io/docs/providers/aws/r/iam_policy.html
# Data Docs: https://www.terraform.io/docs/providers/aws/d/iam_policy_document.html
# ---------------------------------------------------------------------------------------------------------------------

resource "aws_iam_policy" "flowlog" {
  count  = var.flowlogs == true ? 1 : 0
  name   = var.log_policy_name
  policy = data.aws_iam_policy_document.flowlog.json
}

data "aws_iam_policy_document" "flowlog" {
  statement {
    actions = [
      "logs:CreateLogStream",
      "logs:PutLogEvents"
    ]
    resources = [
      "arn:aws:logs:*:*:*",
    ]
  }
}

resource "aws_iam_role_policy_attachment" "this" {
  count      = var.flowlogs == true ? 1 : 0
  role       = aws_iam_role.this[0].name
  policy_arn = aws_iam_policy.flowlog[0].arn
}
